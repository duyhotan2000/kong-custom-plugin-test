version: "3"
services:
  postgres:
    container_name: postgres
    restart: unless-stopped
    build:
      context: .
      dockerfile: ./postgres/Dockerfile
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: dx8F5nq#q&_eMdnF
      PGDATA: /var/lib/postgresql/data/pgdata
    volumes:
      - postgresdata:/var/lib/postgresql/data/pgdata
    ports:
      - 5432:5432
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "konguser"]
      interval: 30s
      timeout: 30s
      retries: 3
    networks:
      - kong-network

  # Adminer
  adminer:
    image: adminer
    container_name: adminer
    restart: unless-stopped
    networks:
      - kong-network
    ports:
      - 8080:8080

  kong-migrations:
    image: kong:2.6.0
    command: kong migrations bootstrap
    depends_on:
      - postgres
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kongdb
      KONG_PG_HOST: postgres
      KONG_PG_USER: konguser
      KONG_PG_PASSWORD: P*Z*PGcz93-w&jJR
    networks:
      - kong-network
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  kong-migrations-up:
    image: kong:2.6.0
    command: kong migrations up && kong migrations finish
    depends_on:
      - postgres
    environment:
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kongdb
      KONG_PG_HOST: postgres
      KONG_PG_USER: konguser
      KONG_PG_PASSWORD: P*Z*PGcz93-w&jJR
    networks:
      - kong-network
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure

  # Kong
  kong:
    build:
      context: .
      dockerfile: ./kong/Dockerfile
    user: kong
    container_name: kong
    depends_on:
      - postgres
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: "0.0.0.0:8001"
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kongdb
      KONG_PG_HOST: postgres
      KONG_PG_USER: konguser
      KONG_PG_PASSWORD: P*Z*PGcz93-w&jJR
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
    networks:
      - kong-network
    ports:
    - "8000:8000/tcp"
    - "8001:8001/tcp"
    - "8443:8443/tcp"
    - "8444:8444/tcp"
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: unless-stopped
    deploy:
      restart_policy:
        condition: on-failure

  # Konga database prepare
  konga-prepare:
    image: pantsel/konga:0.14.9
    command: "-c prepare -a postgres -u postgresql://konguser:P*Z*PGcz93-w%26jJR@postgres:5432/kongadb"
    networks:
      - kong-network
    restart: on-failure
    links:
      - postgres
    depends_on:
      - postgres

  # Konga
  konga:
    image: pantsel/konga:0.14.9
    restart: unless-stopped
    container_name: konga
    networks:
      - kong-network
    environment:
      DB_ADAPTER: postgres
      DB_HOST: postgres
      DB_USER: konguser
      DB_PASSWORD: P*Z*PGcz93-w&jJR
      TOKEN_SECRET: UWoHBSEEz55NOBk9dXFpdNvxbIBh1UoqVYhxHE3OBNsSdFzuUAgzRDJ3MVZ3IZx
      DB_DATABASE: kongadb
      NODE_ENV: production
    depends_on:
      - postgres
    ports:
     - "1337:1337"

  prometheus:
    image: prom/prometheus:v2.18.1
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml --storage.tsdb.path=/prometheus"
    ports:
      - 9090:9090
    networks:
      - kong-network

  grafana:
    image: grafana/grafana:7.0.3
    container_name: grafana
    restart: unless-stopped
    volumes:
      - ./grafana/provisioning/:/etc/grafana/provisioning
    ports:
      - 9091:9091
      - 3001:3000
    networks:
      - kong-network

  redis:
    image: redis
    container_name: redis
    hostname: redis
    ports:
      - 6379:6379
    volumes:
      - redis-data:/data
    command: redis-server --appendonly yes --requirepass ppsb8c0r2VgaV0
    networks:
      - kong-network
  
  redis-commander:
    image: rediscommander/redis-commander
    container_name: redis-commander
    hostname: redis-commander
    restart: always
    ports:
      - 8082:8082
    environment:
      - PORT=8082
      - REDIS_HOST=redis
      - REDIS_PASSWORD=ppsb8c0r2VgaV0
    networks:
      - kong-network

#Docker Networks
networks:
  kong-network:
    driver: bridge

#Volumes
volumes:
  postgresdata:
    driver: local
  redis-data:
    driver: local

